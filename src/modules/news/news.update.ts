import { Update, Ctx, Hears, On } from 'nestjs-telegraf';
import { Context } from '$/libs/interfaces/context.interface';
import { NewsService } from './news.service';
import { KeyboardService } from '../common/services/keyboard.service';

@Update()
export class NewsUpdate {
  constructor(
    private readonly newsService: NewsService,
    private readonly keyboardService: KeyboardService,
  ) {}

  @Hears('üìù –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±–∑–æ—Ä')
  async onPublishReview(@Ctx() ctx: Context) {
    await this.newsService.publishReview(ctx);
  }

  @Hears('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±–∑–æ—Ä')
  async onPublishReviewConfirm(@Ctx() ctx: Context) {
    await this.newsService.handleReviewResponse(ctx, '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–±–∑–æ—Ä');
  }

  @Hears('üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –æ–±–∑–æ—Ä–∞')
  async onModifyReviewText(@Ctx() ctx: Context) {
    await this.newsService.handleReviewResponse(
      ctx,
      'üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –æ–±–∑–æ—Ä–∞',
    );
  }

  @Hears('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –æ–±–∑–æ—Ä–∞')
  async onCancelReview(@Ctx() ctx: Context) {
    await this.newsService.handleReviewResponse(
      ctx,
      '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –æ–±–∑–æ—Ä–∞',
    );
  }

  @Hears('üéâ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã PPV/—Å–ø–µ—Ü—à–æ—É')
  async onPublishPPVResults(@Ctx() ctx: Context) {
    await this.newsService.publishPPVResults(ctx);
  }

  @Hears('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞')
  async onPublishResults(@Ctx() ctx: Context) {
    await this.newsService.publishWeeklyResults(ctx);
  }

  @Hears('‚úÖ –î–∞')
  async onConfirmYes(@Ctx() ctx: Context) {
    await this.newsService.handleWeeklyConfirmation(ctx, true);
  }

  @Hears('‚ùå –ù–µ—Ç')
  async onConfirmNo(@Ctx() ctx: Context) {
    await this.newsService.handleWeeklyConfirmation(ctx, false);
  }

  @Hears('–°–µ–π—á–∞—Å')
  async onPPVNow(@Ctx() ctx: Context) {
    await this.newsService.handlePPVTimeSelection(ctx, '–°–µ–π—á–∞—Å');
  }

  @Hears('–í 7:30')
  async onPPV730(@Ctx() ctx: Context) {
    await this.newsService.handlePPVTimeSelection(ctx, '–í 7:30');
  }

  @Hears('–í 8:30')
  async onPPV830(@Ctx() ctx: Context) {
    await this.newsService.handlePPVTimeSelection(ctx, '–í 8:30');
  }

  @Hears('–í 9:00')
  async onPPV900(@Ctx() ctx: Context) {
    await this.newsService.handlePPVTimeSelection(ctx, '–í 9:00');
  }

  @On('text')
  async onTextMessage(@Ctx() ctx: Context) {
    const text = (ctx.message as any)?.text;

    if (!text) return;

    // Check if the message contains a pwnews.net URL
    const urlMatch = text.match(/(https?:\/\/(?:www\.)?pwnews\.net[^\s]+)/);

    if (urlMatch) {
      const url = urlMatch[1];
      await ctx.reply(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É: ${url}`);
      await this.newsService.publishPPVResults(ctx, url);
    } else {
      // Handle potential review text modification
      await this.newsService.handleReviewResponse(ctx, text);
    }
  }
}
