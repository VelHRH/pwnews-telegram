import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { ConfigKeys } from '$/constants/app.constants';
import { WeeklyShow } from '$/modules/news/news.config';
import { Context } from '$/libs/interfaces/context.interface';
import { Markup } from 'telegraf';
import { KeyboardService } from '../common/services/keyboard.service';

interface PendingPublication {
  text: string;
  url: string;
  videoUrl: string;
  videoImageUrl: string;
  inlineKeyboard: {
    inline_keyboard: Array<
      Array<{
        text: string;
        url: string;
      }>
    >;
  };
}

@Injectable()
export class NewsService {
  private readonly channelId: string;
  private readonly pendingPublications = new Map<number, PendingPublication>();

  constructor(
    private readonly configService: ConfigService,
    private readonly keyboardService: KeyboardService,
  ) {
    this.channelId = this.configService.get(ConfigKeys.CHANNEL_USERNAME);
  }

  async publishReview(ctx: Context): Promise<void> {
    if (!this.channelId) {
      await ctx.reply('–û—à–∏–±–∫–∞: ID –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return;
    }

    const responseAllReviews = await fetch('https://pwnews.net/news/1-0-23');
    const htmlAllReviews = await responseAllReviews.text();
    const linkMatch = htmlAllReviews.match(/href="([^"]+)">–û–±–∑–æ—Ä /);
    const url = linkMatch ? `https://pwnews.net${linkMatch[1]}` : '';

    if (!url) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±–∑–æ—Ä');
      return;
    }

    const response = await fetch(url);
    const html = await response.text();

    const title = html.match(/<title>(.*?)<\/title>/);
    const textMessageMatch = html.match(
      /<div class="textmessage">(.*?)<\/div>/s,
    );
    const imageMatch = html.match(/<img[^>]+src="([^">]+)"/);

    const textMessage = textMessageMatch
      ? textMessageMatch[1]
          .replace(/<p.*?>/g, '')
          .split('<')[0]
          .trim()
      : '';

    const postButtonTitle =
      '–ß–∏—Ç–∞—Ç—å –æ–±–∑–æ—Ä ' +
      Object.values(WeeklyShow).find((show) =>
        title[1].toUpperCase().includes(show),
      );

    const inlineKeyboard = {
      inline_keyboard: [[{ text: postButtonTitle.trim().toUpperCase(), url }]],
    };

    if (imageMatch && imageMatch[1]) {
      const imageUrl = imageMatch[1].startsWith('http')
        ? imageMatch[1]
        : `https://pwnews.net${imageMatch[1]}`;

      await ctx.telegram.sendPhoto(this.channelId, imageUrl, {
        caption: `${textMessage} \n\n${url}`,
        reply_markup: inlineKeyboard,
      });
    } else {
      await ctx.telegram.sendMessage(
        this.channelId,
        `${textMessage} \n\n${url}`,
        {
          reply_markup: inlineKeyboard,
        },
      );
    }
  }

  async publishPPVResults(ctx: Context): Promise<void> {
    if (!this.channelId) {
      await ctx.reply('–û—à–∏–±–∫–∞: ID –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return;
    }

    const response = await fetch('https://pwnews.net/news/1-0-21');
    const html = await response.text();

    const divMatch = html.match(
      /<div[^>]*class="[^"]*vidnovosnew-title[^"]*"[^>]*>(.*?)<\/div>/s,
    );

    if (!divMatch) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ div —Å –∫–ª–∞—Å—Å–æ–º "vidnovosnew-title"');
      return;
    }

    const aTagMatch = divMatch[1].match(/<a[^>]*>(.*?)<\/a>/s);

    if (!aTagMatch) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ a —Ç–µ–≥ –≤–Ω—É—Ç—Ä–∏ div');
      return;
    }

    let cleanedText = aTagMatch[1]
      .replace(/<[^>]*>/g, '') // Remove HTML tags
      .trim();

    cleanedText = cleanedText.replace(/–†–µ–∑—É–ª—å—Ç–∞—Ç—ã\s+(WWE|AEW)/gi, '');

    const currentYear = new Date().getFullYear();
    cleanedText = cleanedText.replace(
      new RegExp(`\\b${currentYear}\\b`, 'g'),
      '',
    );

    cleanedText = cleanedText.replace(/\s+/g, ' ').trim();

    await ctx.reply(cleanedText);
  }

  async publishWeeklyResults(ctx: Context): Promise<void> {
    if (!this.channelId) {
      await ctx.reply('–û—à–∏–±–∫–∞: ID –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return;
    }

    const responseAllReviews = await fetch('https://pwnews.net/stuff/');
    const htmlAllReviews = await responseAllReviews.text();
    const linkMatch = htmlAllReviews.match(
      /href="([^"]+)">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã (WWE|AEW) /,
    );

    const url = linkMatch ? `https://pwnews.net${linkMatch[1]}` : '';

    if (!url) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±–∑–æ—Ä');
      return;
    }

    const response = await fetch(url);
    const html = await response.text();

    const title = html.match(/<title>(.*?)<\/title>/);
    const show = Object.values(WeeklyShow).find((show) =>
      title[1].toUpperCase().includes(show),
    );

    const normalizedShow =
      show.slice(0, 1).toUpperCase() + show.slice(1).toLowerCase();

    const dateMatch = title[1].match(/(\d{2})\.(\d{2})\.(\d{4})/);
    if (!dateMatch) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞');
      return;
    }

    const [, day, month, year] = dateMatch;
    const postDate = new Date(`${year}-${month}-${day}`);
    const oneDayAgo = new Date(new Date().setHours(0, 0, 0, 0));
    oneDayAgo.setTime(oneDayAgo.getTime() - 24 * 60 * 60 * 1000);

    const responseVideo = await fetch('https://pwnews.net/blog/');
    const htmlVideo = await responseVideo.text();
    const dateSearch = `${day}.${month}.${year}`;

    const lines = htmlVideo.split('\n');
    const targetLine = lines.find(
      (line) => line.includes(normalizedShow) && line.includes(dateSearch),
    );

    let videoUrl = '';
    let videoImageUrl = '';

    if (targetLine) {
      const hrefMatch = targetLine.match(/href="([^"]+)"/);
      const srcMatch = targetLine.match(/src="([^"]+)"/);

      videoUrl = hrefMatch ? `https://pwnews.net${hrefMatch[1]}` : '';
      videoImageUrl = srcMatch
        ? srcMatch[1].startsWith('http')
          ? srcMatch[1]
          : `https://pwnews.net${srcMatch[1]}`
        : '';
    }

    if (!videoUrl || !videoImageUrl) {
      await ctx.reply('–í–∏–¥–µ–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —ç—Ñ–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    const text = `–ò—Ç–æ–≥–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ —ç—Ñ–∏—Ä–∞ ${normalizedShow} (+ –æ–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å—å —à–æ—É)`;

    const inlineKeyboard = {
      inline_keyboard: [
        [
          { text: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã'.toUpperCase(), url },
          { text: '–°–º–æ—Ç—Ä–µ—Ç—å'.toUpperCase(), url: videoUrl },
        ],
      ],
    };

    if (postDate < oneDayAgo) {
      await ctx.sendPhoto(videoImageUrl.replace(/\/s/g, '/'), {
        caption: `${text} \n\n‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${url} \n‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å: ${videoUrl}`,
        reply_markup: inlineKeyboard,
      });
      await ctx.reply(
        `–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (${title[1]}) —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ. –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —è –¥–æ–ª–∂–µ–Ω –æ–ø—É–±–ª–∏–∫–æ–≤—Ç—å –∏—Ö? –ï—Å–ª–∏ —á—Ç–æ, —è —Å–∞–º –ø—Ä–æ–≤–µ—Ä—è—é –∞–∫—Ç—É–∞–ª—å—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7:30.`,
        Markup.keyboard([['‚úÖ –î–∞', '‚ùå –ù–µ—Ç']]).resize(),
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      if (ctx.from?.id) {
        this.pendingPublications.set(ctx.from.id, {
          text,
          url,
          videoUrl,
          videoImageUrl: videoImageUrl.replace(/\/s/g, '/'),
          inlineKeyboard,
        });
      }

      return;
    }

    await ctx.telegram.sendPhoto(
      this.channelId,
      videoImageUrl.replace(/\/s/g, '/'),
      {
        caption: `${text} \n\n‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${url} \n‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å: ${videoUrl}`,
        reply_markup: inlineKeyboard,
      },
    );

    await ctx.reply(`–†–µ–∑—É–ª—å—Ç–∞—Ç—ã ${normalizedShow} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã!`);
  }

  async handleWeeklyConfirmation(
    ctx: Context,
    userResponse: boolean,
  ): Promise<void> {
    const userId = ctx.from?.id;

    if (userResponse && userId && this.pendingPublications.has(userId)) {
      const publication = this.pendingPublications.get(userId)!;

      await ctx.telegram.sendPhoto(this.channelId, publication.videoImageUrl, {
        caption: `${publication.text} \n\n‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${publication.url} \n‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å: ${publication.videoUrl}`,
        reply_markup: publication.inlineKeyboard,
      });

      await ctx.reply(
        '–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! üéâ',
        this.keyboardService.getMainKeyboard(),
      );

      // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      this.pendingPublications.delete(userId);
      return;
    }

    await ctx.reply(
      '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
      this.keyboardService.getMainKeyboard(),
    );
    if (userId) {
      this.pendingPublications.delete(userId);
    }
  }
}
